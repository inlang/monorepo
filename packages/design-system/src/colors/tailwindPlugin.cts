import plugin from "tailwindcss/plugin.js";
import colors from "tailwindcss/colors.js";
import type { Config } from "./types/config.cjs";
import { merge } from "lodash";
import { generateTokens } from "./generateTokens.cjs";
import type { Tokens } from "./types/tokens.cjs";

/**
 * Tokens generated by the plugin.
 */
let GENERATED_TOKENS: Tokens;

/**
 * Entrypoint for the colorsystem.
 */
export function withConfig(config: Partial<Config>) {
	// merge mutates default config
	// this line allows the user to specify a partial config
	// and only change the primary color for example.
	merge(defaultConfig, config);
	GENERATED_TOKENS = generateTokens(defaultConfig);
	// @ts-ignore
	return plugin(() => undefined, {
		theme: {
			extend: {
				colors: GENERATED_TOKENS,
			},
		},
	});
}

/**
 * Safelisting color classes is required as the used classes
 * are unknown before the runtime.
 *
 * The function returns  a list of color classes like
 * `['bg-primary', 'text-on-primary', ...]`
 * The implemenation is naive: All tailwind color prefixes are included,
 * leading to roughly 1000 classes with the default config that includes
 * â‰ˆ10 colors.
 */
export function safeListTokens(): string[] {
	if (GENERATED_TOKENS === undefined) {
		const message =
			"Error: The `withConfig` function must be ran before calling `safeListTokens` in the tailwind config file!";
		// increasing the emphasization of the error message with line breaks
		console.error("\n\n", message, "\n\n");
		throw message;
	}
	// generate all color related tailwind classes form one token
	// `flatMap` = merge all classes into one list (instead of a list of lists)
	return Object.keys(GENERATED_TOKENS).flatMap((token) => [
		`text-${token}`,
		`bg-${token}`,
		`decoration-${token}`,
		`ring-offset-${token}`,
		`ring-${token}`,
		`outline-${token}`,
		`divide-${token}`,
		`border-${token}`,
	]);
}

// TODO - better default colors?
const defaultConfig: Config = {
	accentColors: {
		primary: colors.blue,
		secondary: colors.fuchsia,
		tertiary: colors.cyan,
	},
	neutralColors: {
		neutral: colors.stone,
		neutralVariant: colors.neutral,
	},
	semanticColors: {
		error: colors.red,
	},
	colorLevels: {
		base: 600,
		container: 200,
		onContainer: 900,
	},
};
