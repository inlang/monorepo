import { compileMessage } from "./compileMessage.js"
import { ProjectSettings, type Message } from "@inlang/sdk"

const ignoreDirectory = `# ignore everything because the directory is auto-generated by inlang paraglide-js
# for more info visit https://inlang.com/m/gerre34r/paraglide-js
*
`

/**
 * A compile function takes a list of messages and project settings and returns
 * a map of file names to file contents.
 *
 * @example
 *   const output = compile({ messages, settings })
 *   console.log(output)
 *   >> { "messages.js": "...", "runtime.js": "..." }
 */
export const compile = (args: {
	messages: Readonly<Message[]>
	settings: ProjectSettings
}): Record<string, string> => {
	const compiledMessages = args.messages.map(compileMessage)

	const resources: Record<string, string> = {}

	for (const compiledMessage of compiledMessages) {
		for (const languageTag of Object.keys(compiledMessage)) {
			if (languageTag === "index") {
				continue
			} else if (resources[languageTag] === undefined) {
				resources[languageTag] = ""
			}
			resources[languageTag] += "\n\n" + compiledMessage[languageTag]
		}
	}

	if (args.settings.languageTags.length < Object.keys(resources).length) {
		for (const languageTag of Object.keys(resources)) {
			if (args.settings.languageTags.includes(languageTag) === false) {
				throw new Error(
					`The language tag "${languageTag}" is not included in the project's language tags but contained in of your messages. Please add the language tag to your project's language tags or delete the messages with the language tag "${languageTag}" to avoid unexpected type errors.`
				)
			}
		}
	}

	return {
		// boilerplate files
		".prettierignore": ignoreDirectory,
		".gitignore": ignoreDirectory,
		".eslintignore": ignoreDirectory,
		// resources
		// (messages/en.js)
		// (messages/de.js)
		// (etc...)
		...Object.fromEntries(
			Object.entries(resources).map(([languageTag, content]) => [
				`messages/${languageTag}.js`,
				`
/** 
* This file contains language specific message functions for tree-shaking. 
* 
*! WARNING: Only import messages from this file if you want to manually
*! optimize your bundle. Else, import from the \`messages.js\` file. 
* 
* Your bundler will (in the future) automatically replace the index function 
* with a language specific message function in the build step. 
*/` + content,
			])
		),
		// message index file
		"messages.js": `
import { languageTag } from "./runtime.js"
${Object.keys(resources)
	.map(
		(languageTag) =>
			`import * as ${languageTag.replaceAll("-", "_")} from "./messages/${languageTag}.js"`
	)
	.join("\n")}

${compiledMessages.map((message) => message.index).join("\n\n")}
`,
		"runtime.js": `
/** @type {((tag: AvailableLanguageTag) => void) | undefined} */ 
let _onSetLanguageTag

/**
 * The project's source language tag.
 * 
 * @example
 *   if (newlySelectedLanguageTag === sourceLanguageTag){
 *     // do nothing as the source language tag is the default language
 *     return
 *   }
 */
export const sourceLanguageTag = "${args.settings.sourceLanguageTag}"

/**
 * The project's available language tags.
 * 
 * @example 
 *   if (availableLanguageTags.includes(userSelectedLanguageTag) === false){
 *     throw new Error("Language tag not available")
 *   }
 */
export const availableLanguageTags = /** @type {const} */ (${JSON.stringify(
			args.settings.languageTags
		)})

/**
 * Get the current language tag.
 * 
 * @example
 *   if (languageTag() === "de"){
 *     console.log("Germany ðŸ‡©ðŸ‡ª")
 *   } else if (languageTag() === "nl"){
 *     console.log("Netherlands ðŸ‡³ðŸ‡±")
 *   }
 * 
 * @type {() => AvailableLanguageTag}
 */
export let languageTag = () => sourceLanguageTag

/**
 * Set the language tag.
 * 
 * @example 
 * 
 *   // changing to language 
 *   setLanguageTag("en")
 * 
 *   // passing a getter function also works. 
 *   // 
 *   // a getter function is useful for resolving a language tag 
 *   // on the server where every request has a different language tag
 *   setLanguageTag(() => {
 *     return request.langaugeTag
 *   }) 
 *
 * @param {AvailableLanguageTag | (() => AvailableLanguageTag)} tag
 */
export const setLanguageTag = (tag) => {
	if (typeof tag === "function") {
		languageTag = tag
	} else {
		languageTag = () => tag
	}
	// call the callback function if it has been defined
	if (_onSetLanguageTag !== undefined) {
		_onSetLanguageTag(languageTag())
	}
}

/**
 * Set the \`onSetLanguageTag()\` callback function.
 *
 * The function can be used to trigger client-side side-effects such as 
 * making a new request to the server with the updated language tag, 
 * or re-rendering the UI on the client (SPA apps).  
 * 
 * - Don't use this function on the server (!).
 *   Triggering a side-effect is only useful on the client because a server-side
 *   environment doesn't need to re-render the UI. 
 *     
 * - The \`onSetLanguageTag()\` callback can only be defined once to avoid unexpected behavior.
 * 
 * @example
 *   // if you use inlang paraglide on the server, make sure 
 *   // to not call \`onSetLanguageTag()\` on the server
 *   if (isServer === false) {
 *     onSetLanguageTag((tag) => {
 *       // (for example) make a new request to the 
 *       // server with the updated language tag
 *       window.location.href = \`/\${tag}/\${window.location.pathname}\`
 *     })
 *   }
 *
 * @param {(languageTag: AvailableLanguageTag) => void} fn
 */
export const onSetLanguageTag = (fn) => {
	if (_onSetLanguageTag !== undefined) {
		throw new Error("@inlang/paraglide-js: The \`onSetLanguageTag()\` callback has already been defined.\\n\\nThe \`onSetLanguageTag()\` callback can only be defined once to avoid unexpected behavior.\\n\\n 1) Try searching for \`onSetLanguageTag()\` in your codebase for potential duplicated.\\n 2) It might be that your framework is calling \`onSetLanguageTag()\` multiple times. Try to move the \`onSetLanguageTag()\` out of the rendering scope like a React component.")
	}
	_onSetLanguageTag = fn
}

// ------ TYPES ------

/**
 * A language tag that is available in the project.
 * 
 * @example
 *   setLanguageTag(request.languageTag as AvailableLanguageTag)
 * 
 * @typedef {typeof availableLanguageTags[number]} AvailableLanguageTag
 */
`,
	}
}
