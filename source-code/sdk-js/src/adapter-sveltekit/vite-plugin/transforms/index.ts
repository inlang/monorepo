import { InlangError } from "../../../config/config.js"
import type { TransformConfig } from "../config.js"
import type { FileInformation } from "../fileInformation.js"
import { transformJs } from "./_.js.js"
import { transformSvelte } from "./_.svelte.js"
import { transformLayoutJs } from "./+layout.js.js"
import { transformLayoutServerJs } from "./+layout.server.js.js"
import { transformLayoutSvelte } from "./+layout.svelte.js"
import { transformPageJs } from "./+page.js.js"
import { transformPageServerJs } from "./+page.server.js.js"
import { transformPageSvelte } from "./+page.svelte.js"
import { transformServerRequestJs } from "./+server.js.js"
import { transformServerJs } from "./_.server.js.js"
import { transformHooksServerJs } from "./hooks.server.js.js"
import { transformLanguageJson } from "./[language].json.js"

// TODO: throw errors if something is not supported and show a guide how to add the functionality manually

export const transformCode = (
	config: TransformConfig,
	code: string,
	{ type, root }: FileInformation,
) => {
	if (!pluginOrderVerified && type.endsWith(".svelte")) assertCorrectPluginOrder(code)

	switch (type) {
		case "hooks.server.js":
			return transformHooksServerJs(config, code)
		case "[language].json":
			return transformLanguageJson(config, code)
		case "+server.js":
			return transformServerRequestJs(config, code, root)
		case "+layout.server.js":
			return transformLayoutServerJs(config, code, root)
		case "+layout.js":
			return transformLayoutJs(config, code, root)
		case "+layout.svelte":
			return transformLayoutSvelte(config, code, root)
		case "+page.server.js":
			return transformPageServerJs(config, code, root)
		case "+page.js":
			return transformPageJs(config, code, root)
		case "+page.svelte":
			return transformPageSvelte(config, code, root)
		case "*.server.js":
			return transformServerJs(config, code)
		case "*.js":
			return transformJs(config, code)
		case "*.svelte":
			return transformSvelte(config, code)
	}
}

// ------------------------------------------------------------------------------------------------

let pluginOrderVerified = false

const REGEX_SVELTE_COMPILER_INFO = /^\/\*\s.*\.svelte generated by Svelte v\d+.\d+.\d+\s\*\/$/

const assertCorrectPluginOrder = (code: string) => {
	if (code.split("\n")[0]?.match(REGEX_SVELTE_COMPILER_INFO)) {
		throw new InlangError(
			"Make sure to place the inlang plugin before the svelte plugin in your vite config. See https://inlang.com/documentation/sdk/sveltekit.",
		)
	}

	pluginOrderVerified = true
}
